# deployfns:
# Functions for deployment scripts.
#
# Copyright (c) 2004 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#
# $Id: deployfns,v 1.9 2005/02/10 16:37:50 francis Exp $
#

# Warnings and errors
die () {
    echo "$SCRIPT_COMMAND:" "$@" 1>&2
    exit 1
}

warn () {
    echo "$SCRIPT_COMMAND:" "$@" 1>&2
}

# Check we are root@$EXPECTED_HOST and $MYSOCIETY_BIN exists
check_who_where () {
    if [ ! -d "$MYSOCIETY_BIN" ] 
    then 
        die "must run with mysociety/fyr/bin as current directory"
    fi

    if [ "`id -u`" != "0" ]
    then
        die "must run as root"
    fi

    if [ `hostname` != "$EXPECTED_HOST" ]
    then
        die "this script is only for $EXPECTED_HOST"
    fi
}

# Exports from CVS into the deploy space, erasing whatever was there
# already.  Copies current config files from the vhost. 
# $1 - user name to su to 
# $2 - path to vhost, where live server is
# $3 - path to deploy space, GETS ERASED FIRST
cvs_export () {
    cd $3
    rm -fr mysociety
    export CVSROOT=:pserver:anonymous@cvs.mysociety.org:/repos
    su $1 -c "cvs -Q export -r HEAD -d mysociety mysociety"

    # Copy over config files
    cd $2
    for X in mysociety/*/conf/general 
    do
        cp $X $3/$X
    done
}

# Copies from the deploy space to the live space using rsync.
# Leaves any existing files with other names alone.
# $1 - path to deploy space
# $2 - path to vhost, where live server is, GETS OVERWRITTEN BY DEPLOY SPACE
rsync_across () {
    rsync --exclude=down.html -a $1/mysociety/ $2/mysociety
}

# Marks a vhost as being down for maintenance.
# $1 - path to vhost
# $2 - display name of website
down_notice () {
    cat >$1/docs/.down.html.new <<END
<html>
<head>
<title>$2 - Down for Maintenance</title>
</head>
<body>
<p>Sorry, but $2 is currently not available.  We're doing a spot of
maintenance.  Check back in a few minutes, and everything should be
restored to order.  Thanks for your patience!
<p> &mdash; the <a href="http://www.mysociety.org/">mySociety</a> developers
</body>
</html>
END
    mv $1/docs/.down.html.new $1/docs/down.html
}

# Removes the file which displays a vhost as being down for maintenance.
# $1 - path to vhost
up_notice () {
    rm $1/docs/down.html
}

# Checks config file has all options
# $1 - path to conf folder with general and general-example in it
check_config_files () {
    cd $MYSOCIETY_BIN
    ./compareconfig.pl $1/general $1/general-example || die "configuration files differ"
    cd -
}

# Tests if the schema in a file is the same as in a postgra postgresql
# database.
# $1 - unix user who can access db
# $2 - schema file
# $3 - pgsql db name
# $4 - pgsql db user
# $5 - pgsql db pass
check_pgsql_schema () {
    CVS_SCHEMA_FILE=`mktemp /tmp/ms-deploy-cvsschema.XXXXXX`
    CURRENT_SCHEMA_FILE=`mktemp /tmp/ms-deploy-currentschema.XXXXXX`

    # load file schema into a temporary place to dump it
    # in the same format as ...
    dropdb -q -U $PSQL_SCHEMATEST_USER schematest || warn "schematest already dropped, continuing"
    createdb -q -U $PSQL_SCHEMATEST_USER schematest
    psql --file=$2 -U $PSQL_SCHEMATEST_USER -q schematest 2>&1 | grep -v "will create implicit" && echo -n 
    pg_dump -s -U $PSQL_SCHEMATEST_USER schematest | egrep -v "^--|SET SESSION AUTHORIZATION|\\connect - |GRANT ALL|REVOKE ALL" | grep -v "SET search_path = public, pg_catalog;" | sed "s/,$//;" > $CVS_SCHEMA_FILE

    # ... the live database dump
    su $1 -c "pg_dump -s -U $4 $3" | egrep -v "^--|SET SESSION AUTHORIZATION|\\connect - |GRANT ALL|REVOKE ALL" | grep -v "SET search_path = public, pg_catalog;" | sed "s/,$//;" > $CURRENT_SCHEMA_FILE

    # Note:  Using sort here is completely evil.  It is because
    # older verions of pg_dump don't output the tables in a stable
    # order.  The above code would get confused it a column was moved
    # from one table to another with no other changes.  Hopefully this
    # is unlikely.  More recent pgsql have a fixed pg_dump.  Or a Perl
    # script could be used to compare schemas.
    # If you hate this send us a patch ;)  Better actually release a
    # comprehensive schema comparing tool...
    cat $CVS_SCHEMA_FILE | sort > $CVS_SCHEMA_FILE.sorted
    cat $CURRENT_SCHEMA_FILE | sort > $CURRENT_SCHEMA_FILE.sorted

    # Compare them
    if ! diff --ignore-blank-lines $CVS_SCHEMA_FILE.sorted $CURRENT_SCHEMA_FILE.sorted
    then
        warn "Schema in CVS differs from that in pgsql database, you need to update it"
        warn "database: $3; user: $4 schema: $2"
        warn "CVS schema: $CVS_SCHEMA_FILE; current schema: $CURRENT_SCHEMA_FILE"
        exit 1
    fi
}

# Reads in config file
# Currently doesn't read in numeric values
# $1 - config file
read_conf () {
    # XXX use of mktemp here not safe; should make a temporary directory
    CONF_SOURCE=`mktemp /tmp/ms-deploy-configsource.XXXXXX`
    cat $1 | grep define | egrep -v "^\/\/" | egrep -v "^ \*" | sed "s/define('\(.*\)', '\(.*\)'.*/\1=\"\2\"/" | egrep -v "define|mySociety::Config" >$CONF_SOURCE
    . $CONF_SOURCE
}

# Stops a daemon
# $1 - name of daemon
daemon_stop () {
    /usr/local/etc/rc.d/$1.sh stop || warn "daemon stop failed, continuing anyway"
}

# Starts a daemon
# $1 - name of daemon
daemon_start () {
    /usr/local/etc/rc.d/$1.sh start
}


# Stuff to automatically run
check_who_where


